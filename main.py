from flask import Flask, request, jsonify
from flask_cors import CORS
import os

app = Flask(_name_)
CORS(app)  # Libera o CORS para consumo externo

# Base de dados de swipes por categoria
SWIPES_DB = {
    "ads": [{"title": "An√∫ncio que converte", "description": "Modelo direto ao ponto para vendas r√°pidas", "button": {"text": "Usar este an√∫ncio", "action": "usarSwipe"}}],
    "advice": [{"title": "Dica de ouro", "description": "Use provas sociais para fortalecer sua copy", "button": {"text": "Aplicar dica", "action": "usarSwipe"}}],
    "beforeandafter": [{"title": "Antes: problema. Depois: solu√ß√£o", "description": "Mostre a transforma√ß√£o", "button": {"text": "Usar estrutura", "action": "usarSwipe"}}],
    "copywriting": [{"title": "Voc√™ achava que X era bom...", "description": "Crie contraste e desejo", "button": {"text": "Gerar varia√ß√£o", "action": "usarSwipe"}}],
    "data": [{"title": "Dados n√£o mentem", "description": "Comece sua copy com um dado chocante", "button": {"text": "Usar dado", "action": "usarSwipe"}}],
    "directmail": [{"title": "Mensagem direta", "description": "Modelo para convers√£o via e-mail f√≠sico", "button": {"text": "Usar este modelo", "action": "usarSwipe"}}],
    "emails": [{"title": "Assunto irresist√≠vel", "description": "Modelo de email com alta taxa de abertura", "button": {"text": "Enviar e-mail", "action": "usarSwipe"}}],
    "images": [{"title": "Imagem que vende", "description": "Sugest√£o de visual para campanha", "button": {"text": "Gerar imagem", "action": "usarSwipe"}}],
    "money": [{"title": "Fale de dinheiro", "description": "Swipe que ativa o gatilho financeiro", "button": {"text": "Usar esse apelo", "action": "usarSwipe"}}],
    "motivation": [{"title": "Inspire para vender", "description": "Modelo com apelo emocional", "button": {"text": "Usar inspira√ß√£o", "action": "usarSwipe"}}],
    "pricing": [{"title": "Pre√ßo irresist√≠vel", "description": "Swipe com ancoragem de valor", "button": {"text": "Aplicar oferta", "action": "usarSwipe"}}],
    "printads": [{"title": "An√∫ncio impresso eficaz", "description": "Modelo cl√°ssico de jornal ou revista", "button": {"text": "Usar esse an√∫ncio", "action": "usarSwipe"}}],
    "quotes": [{"title": "‚ÄúA pizza √© a simplicidade feita arte‚Äù", "description": "Frases de impacto", "button": {"text": "Usar cita√ß√£o", "action": "usarSwipe"}}],
    "salespages": [{"title": "Landing page vendedora", "description": "Estrutura de p√°gina de vendas", "button": {"text": "Usar estrutura", "action": "usarSwipe"}}],
    "socialmedia": [{"title": "Essa pizza n√£o √© pra todo mundo", "description": "Swipe provocador para Instagram", "button": {"text": "Usar esse tom", "action": "usarSwipe"}}],
    "swipesemail": [{"title": "Sequ√™ncia de e-mails", "description": "Modelo completo de funil", "button": {"text": "Usar sequ√™ncia", "action": "usarSwipe"}}],
    "testimonials": [{"title": "Depoimento de impacto", "description": "Modelo de prova social", "button": {"text": "Usar depoimento", "action": "usarSwipe"}}],
    "videos": [{"title": "V√≠deo que prende aten√ß√£o", "description": "Estrutura para reels e TikToks", "button": {"text": "Criar v√≠deo", "action": "usarSwipe"}}],
    "wisdom": [{"title": "Sabedoria aplicada ao marketing", "description": "Swipe reflexivo com gancho comercial", "button": {"text": "Usar insight", "action": "usarSwipe"}}]
}

@app.route('/')
def home():
    return "API de swipes est√° no ar!"

@app.route('/swipes', methods=['GET'])
def swipes():
    categoria = request.args.get("categoria", "copywriting")
    itens = SWIPES_DB.get(categoria, [])
    return jsonify({
        "type": "cards",
        "title": f"Swipes da categoria: {categoria}",
        "items": itens
    })

@@app.route('/categorias', methods=['GET'])
def listar_categorias():
    categorias = list(SWIPES_DB.keys())
    categorias_ordenadas = sorted(categorias)
    lista_texto = "\\n".join([f"{i+1}. {categoria.capitalize()}" for i, categoria in enumerate(categorias_ordenadas)])
    return jsonify({
        "type": "text",
        "content": f"Escolha uma categoria digitando o n√∫mero correspondente:\\n\\n{lista_texto}"
    })
üîß Esse retorno j√° est√° formatado para o GPT interpreta
    return jsonify({
        "type": "cards",
        "title": "Categorias dispon√≠veis",
        "items": categorias
    })

if _name_ == '_main_':
    port = int(os.environ.get("PORT", 5000))
    app.run(host='0.0.0.0', port=port)
